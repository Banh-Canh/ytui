/*
Copyright Â© 2024 Victor Hang
*/
package cmd

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"go.uber.org/zap/zapcore"

	"github.com/Banh-Canh/ytui/pkg/config"
	"github.com/Banh-Canh/ytui/pkg/utils"
)

var (
	versionFlag bool
	version     string
)

// rootCmd represents the base command when called without any subcommands
var RootCmd = &cobra.Command{
	Use:   "ytui",
	Short: "ytui TUI.",
	Long: `
ytui is a TUI tool that allows users to query videos on youtube and play them in their local player.
The configuration files is autogenerated on first run at *$HOME/.config/ytui/config.yaml*`,
	PersistentPreRun: func(cmd *cobra.Command, args []string) {
		// Initialize configuration here
		initConfig()
	},
	Run: func(cmd *cobra.Command, args []string) {
		if versionFlag {
			fmt.Printf("%s", version)
		} else {
			cmd.Help() //nolint:all
		}
	},
}

func initConfig() {
	// Your configuration initialization logic
	configDir, err := config.GetConfigDirPath()
	if err != nil {
		os.Exit(1)
	}
	logLevelStr := viper.GetString("logLevel")
	logLevel := zapcore.InfoLevel //nolint:all
	switch logLevelStr {
	case "debug":
		logLevel = zapcore.DebugLevel
	case "info":
		logLevel = zapcore.InfoLevel
	case "error":
		logLevel = zapcore.ErrorLevel
	default:
		fmt.Printf("Unknown log level %s, defaulting to info\n", logLevelStr)
		logLevel = zapcore.InfoLevel
	}
	utils.InitializeLogger(logLevel, filepath.Join(configDir, "ytui.log"))
	utils.Logger.Info("Initializing configuration...")
	config.CreateDefaultConfigFile(filepath.Join(configDir, "config.yaml"))
	utils.Logger.Info("Initialized configuration.")
}

func Execute() {
	err := RootCmd.Execute()
	if err != nil {
		os.Exit(1)
	}
}

func init() {
	RootCmd.Flags().BoolVarP(&versionFlag, "version", "v", false, "Display version information")
}
